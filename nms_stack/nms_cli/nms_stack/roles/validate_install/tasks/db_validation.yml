---
# Check that we can connect to the DB with the provided credentials
- name: Can remotely login with DB root credentials
  shell: >
    docker run --rm --network=terragraph_net {{ db_image }} \
    mysql -u{{ db_root_user }} -p{{ passwords.db_root_password  }} --host=database_db cxl -e "SELECT 1+1;"
  register: result
  changed_when: false
  ignore_errors: yes
  failed_when: result.rc
- set_fact:
    validation_errors: "{{validation_errors + [result.stderr] if result.rc > 0 else validation_errors}}"

- name: NMS can login with its credentials
  shell: >
    docker run --rm --env-file=/opt/terragraph/gfs/database/env/mysql.env \
    --network=terragraph_net {{ db_image }} \
    sh -c 'mysql -u${MYSQL_USER} -p${MYSQL_PASS} --host=database_db cxl -e "SELECT 1+1;"'
  register: result
  changed_when: false
  ignore_errors: yes
  failed_when: result.rc
- set_fact:
    validation_errors: "{{validation_errors + [result.stderr] if result.rc > 0 else validation_errors}}"

- name: MSA Services can login with their credentials
  shell: docker run --rm --env-file=/opt/terragraph/gfs/msa/env/{{item.name}}.env --network=terragraph_net {{ db_image }} sh -c 'mysql -u${DB_USER} -p${DB_PASSWORD} --host=database_db ${DB_NAME} -e "SELECT 1+1;"'
  loop:
    - { name: "default_routes_service" }
    - { name: "network_health_service" }
    - { name: "network_test" }
    - { name: "scan_service" }
    - { name: "topology_service" }
  changed_when: false
  ignore_errors: yes
  register: result
  failed_when: result.rc
- vars:
    has_errors: "{{result.results | rejectattr('rc', 'eq', 0) | list | count > 0}}"
    results: "{{result.results | map(attribute='stderr') | list}}"
  set_fact:
    validation_errors: "{{validation_errors + results if has_errors else validation_errors}}"

- name: Grafana writer can login with its credentials
  shell: >
    docker run --rm --env-file=/opt/terragraph/gfs/nms/env/grafana.env \
    --network=terragraph_net {{ db_image }} \
    sh -c 'mysql -u${GRAFANA_MYSQL_WRITER} -p${GRAFANA_MYSQL_WRITER_PASS} --host=database_db grafana -e "SELECT 1+1;"'
  register: result
  changed_when: false
  ignore_errors: yes
  failed_when: result.rc
- set_fact:
    validation_errors: "{{validation_errors + [result.stderr] if result.rc > 0 else validation_errors}}"
